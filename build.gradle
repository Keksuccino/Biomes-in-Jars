
import net.fabricmc.loom.api.mappings.layered.MappingLayer
import net.fabricmc.loom.api.mappings.layered.MappingsNamespace
import net.fabricmc.loom.api.mappings.layered.spec.MappingsSpec
import net.fabricmc.loom.api.mappings.layered.MappingContext
import net.fabricmc.mappingio.MappingVisitor
import net.fabricmc.mappingio.tree.MemoryMappingTree
import net.fabricmc.loom.configuration.providers.mappings.intermediary.IntermediaryMappingLayer

plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {

	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven { url "https://cfa2.cursemaven.com" }
	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }

}

dependencies {

	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	mappings loom.layered {
		officialMojangMappings()
		parchment("org.parchmentmc.data:${project.parchment_mappings}@zip")
		//don't convert this to a dynamic instantiation, otherwise java won't see the overridden hashCode
		addLayer(new MappingsSpec<MappingLayer>() {

			final Map<String, String> METHOD_NAME_MAP = Map.of(
					"getTextureLocation", "_getTextureLocation"
			)

			@Override
			MappingLayer createLayer(MappingContext mappingContext) {
				return new MappingLayer() {
					@Override
					void visit(MappingVisitor mappingVisitor) throws IOException {
						MemoryMappingTree memoryMappingTree = mappingVisitor as MemoryMappingTree
						memoryMappingTree.getClasses().forEach(classEntry -> {
							classEntry.methods.forEach(methodEntry -> {
								String newMethodName = METHOD_NAME_MAP.get(methodEntry.getName(MappingsNamespace.NAMED.toString()))
								if (newMethodName != null) {
									//noinspection GroovyAccessibility
									methodEntry.srcName = newMethodName
								}
							})
						})
					}

					@Override
					MappingsNamespace getSourceNamespace() {
						return MappingsNamespace.NAMED
					}

					@Override
					List<Class<? extends MappingLayer>> dependsOn() {
						return List.of(IntermediaryMappingLayer.class)
					}
				}
			}

			@Override
			int hashCode() {
				// used to make sure caches stay consistent
				return METHOD_NAME_MAP.hashCode()
			}

		})

	}
	
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "software.bernie.geckolib:geckolib-fabric-1.18:3.0.62"
	
	implementation fileTree('libs') { include '*.jar' }

}

loom {
	accessWidenerPath = file("src/main/resources/biomesinjars.accessWidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {

	it.options.encoding = "UTF-8"
	
	it.options.release = 17
	
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
	rename 'biomes_in_jars-refmap.json', 'biomesinjars.mixin-refmap.json'
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}